sql.user.find_by_id=select user.id, user.username, user.password, user.role, user.active, user.created, \
   user.email, profile.id, profile.user_id, profile.avatar, profile.first_name, profile.last_name, profile.age,\
   profile.language, profile.created \
   from user join profile on user.id = profile.user_id \
   where user.active = true and user.id=:id
sql.user.find_by_email=select user.id, user.username, user.password, user.role, user.active, user.created,\
   user.email, profile.id, profile.user_id, profile.avatar, profile.first_name, profile.last_name, profile.age,\
   profile.language, profile.created \
   from user join profile on user.id = profile.user_id \
   where user.active = true and user.email=:email
sql.user.find_by_username=select user.id, user.username, user.password, user.role, user.active, user.created,\
   user.email, profile.id, profile.user_id, profile.avatar, profile.first_name, profile.last_name, profile.age,\
   profile.language, profile.created \
   from user join profile on user.id = profile.user_id \
   where user.username=:username
sql.user.find_all=select user.id, user.username, user.password, user.role, user.active, user.created,\
   user.email, profile.id, profile.user_id, profile.avatar, profile.first_name, profile.last_name, profile.age,\
   profile.language, profile.created \
   from user join profile on user.id = profile.user_id \
   where user.active = true
sql.user.save_profile=insert into profile (id, avatar, user_id, first_name, last_name, age, language, created) \
   values (:id, :avatar, :userId, :firstName, :lastName, :age, :language, :created);
sql.user.save_user=insert into user (id, username, password, role, active, created, email) \
   values (:id, :username, :password, :role, :active, :created, :email);
sql.user.update_user=update user set username=:username, password=:password,\
   role=:role, active=:active, updated=:updated, email=:email \
   where id = :id
sql.user.update_profile=update profile set avatar=:avatar, user_id=:userId,\
   first_name=:firstName, last_name=:lastName, age=:age, updated=:updated, language=:language \
   where id = :id
sql.user.delete=update user set active = false where id = :id
sql.user.deleteAllProfile=delete from profile
sql.user.deleteAllUser=delete from user
sql.user.saveAll=insert into user (username, password, role, active, created,\
   email) values (:username, :password, :role, :active, :created, :email);
sql.user_movie.find_by_id=select id, rating, notes, viewed, user_id, external_movie_id, created, updated from user_movie \
   where id=:id
sql.user_movie.delete=delete from user_movie where id=:id
sql.user_movie.save=insert into user_movie (rating, notes, viewed, user_id, external_movie_id, created) \
   values (:rating, :notes, :viewed, :userId, :externalMovieId, :created)
sql.user_movie.update=update user_movie set rating = :rating, notes=:notes, viewed = :viewed, updated=:updated \
   where id = :id
sql.user_movie.find_all_favourite_by_user_id=select id, rating, notes, viewed, user_id, external_movie_id, created, updated \
   from user_movie  where user_id=:userId
sql.user_movie.count_all_favourite_by_user_id=select count(*) from user_movie  where user_id=:userId
sql.user_movie.find_all=select id, rating, notes, viewed, user_id, external_movie_id, created, updated \ \
   from user_movie ORDER BY :sortColumn ASC  LIMIT :limit OFFSET :offset
sql.user_movie.count_all=select count(*) from user_movie
sql.user_movie.find_all_filter_by_rating_after_and_created_after=select id, rating, notes, viewed, user_id, external_movie_id, created, updated \
   from user_movie \
   where rating > :rating and created > :created LIMIT :limit OFFSET :offset
sql.user_movie.find_all_filter_by_notes_containing_and_viewed_true=select id, rating, notes, viewed, user_id, external_movie_id, created, updated \
   from user_movie \
   where notes like :search and viewed=true LIMIT :limit OFFSET :offset
